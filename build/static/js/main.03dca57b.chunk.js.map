{"version":3,"sources":["components/ErrorBoundary.js","models/station.js","components/Player.js","hooks/useRecommendations.js","components/StationsList.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","console","this","className","children","React","Component","createStationFromRawData","rawStation","id","description","name","imgUrl","streamUrl","reliability","popularity","tags","isNonEmptyString","str","length","isNumber","num","String","Date","now","Array","isArray","Player","station","stationError","key","join","alt","src","autoPlay","controls","onError","alert","useRecommendations","stations","useState","preferenceScores","updatePreferenceScores","selectedStationTags","cachedPreferenceScores","forEach","tag","includes","Math","ceil","map","preferenceScore","score","floor","sort","a","b","slice","StationsList","setSelectedStation","updatePreferences","recommendations","getRecommendations","renderStation","onClick","stationsSortedByPopularity","useMemo","find","Container","selectedStation","setStations","isError","setError","failureMessage","url","responseType","onResponse","response","data","undefined","stationsRaw","fetching","failed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.03dca57b.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1 className=\"message\">Sorry! TuneIn lite is not working right now. Please refresh the page or try again later</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","const createStationFromRawData = rawStation => {\n  const {\n    id,\n    description,\n    name,\n    imgUrl,\n    streamUrl,\n    reliability,\n    popularity,\n    tags,\n  } = rawStation;\n\n  const isNonEmptyString = str => typeof str === 'string' && str.length > 0;\n  const isNumber = num => typeof num === 'number';\n  \n  return {\n    id: isNonEmptyString(id) ? id: String(Date.now()),\n    description: isNonEmptyString(description) ? description : 'no description found',\n    name: isNonEmptyString(name) ? name : 'no name found',\n    imgUrl: isNonEmptyString(imgUrl) ? imgUrl : 'https://via.placeholder.com/145',\n    streamUrl: isNonEmptyString(streamUrl) ? streamUrl : '',\n    reliability: isNumber(reliability) ? reliability : 0,\n    popularity: isNumber(popularity) ? popularity : 0,\n    tags: Array.isArray(tags) ? tags : [],\n  }\n};\n\nexport default createStationFromRawData;","import React from 'react';\n\nconst ERROR_TEXT = 'Sorry, there was a problem trying to play this station. Please try another.';\n\nconst Player = ({station, stationError}) => (\n  <div className=\"player\" key={station.id}>\n    <h3>{station.name}</h3>\n    <div>{station.description}</div>\n    <br/>\n    <div><b>Categories:</b> {station.tags.join(', ')}</div>\n    <br/>\n    <div><img alt={station.name} src={station.imgUrl} /></div>\n    <audio\n      autoPlay={true}\n      controls\n      onError={() => {\n        alert(ERROR_TEXT);\n        stationError();\n      }}\n      src={station.streamUrl}>\n    </audio>\n  </div>\n);\n\n\nexport default Player;","import { useState } from 'react';\n\nconst useRecommendations = stations => {\n  const [preferenceScores, updatePreferenceScores] = useState(\n    {\n      'hip hop': 0,\n      'music': 0,\n      'latin': 0,\n      'pop latino': 0,\n      'news': 0,\n      'public radio': 0,\n      'current affairs': 0,\n      'jazz': 0,\n      'chicago': 0,\n      'top': 0,\n      'classic rock': 0,\n      'pop': 0,\n      'top hits': 0,\n      'country hits': 0,\n      'world news': 0,\n    }\n  );\n  \n  const updatePreferences = selectedStationTags => {\n    let cachedPreferenceScores = preferenceScores;\n    selectedStationTags.forEach(tag => {\n      cachedPreferenceScores = {\n        ...cachedPreferenceScores,\n        [tag]: ['news', 'music'].includes(tag) ? \n          Math.ceil((preferenceScores[tag] + 3)) :\n          Math.ceil((preferenceScores[tag] + 2)),\n      };\n    });\n    updatePreferenceScores(cachedPreferenceScores);\n  };\n\n  const getRecommendations = () => {\n    if (stations.length < 1) return;\n    const scoredStations = stations.map(station => {\n      const {\n        id,\n        popularity,\n        reliability,\n      } = station;\n      let preferenceScore = 0;\n      station.tags.forEach(tag => {\n        preferenceScore += preferenceScores[tag]\n      });\n\n      return {\n        id,\n        score: preferenceScore + popularity + Math.floor(reliability/10),\n      }\n    });\n\n    const topThree = scoredStations.sort((a, b) => b.score - a.score).slice(0, 3);\n    return topThree;\n  };\n\n  return [updatePreferences, getRecommendations];\n}\n\nexport default useRecommendations;","import React, { useMemo } from 'react';\nimport useRecommendations from '../hooks/useRecommendations';\n\nconst StationsList = ({stations, setSelectedStation}) => {\n  const [updatePreferences, getRecommendations] = useRecommendations(stations);\n  const recommendations = getRecommendations();\n\n  const renderStation = station => (\n    <button \n      className=\"station\"\n      onClick={() => {\n        updatePreferences(station.tags);\n        setSelectedStation(station.id)\n      }}\n      key={station.id}\n    >\n      {station.name}\n    </button>\n  );\n\n  const stationsSortedByPopularity = useMemo(() => {\n    return stations.sort((a, b) => b.popularity - a.popularity);\n  }, [stations]);\n\n  return (\n    <div className=\"list\">\n      <h4><i>-------------suggested stations------------</i></h4>\n      <div>\n      {recommendations && recommendations.map(({id}) => {\n        const station = stations.find(station => id === station.id)\n        return renderStation(station);\n      })}\n      </div>\n      <br/>\n      <h4>----------All Stations-----------</h4>\n      <div>\n        {stationsSortedByPopularity.map(station => (\n          renderStation(station)\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default StationsList;\n\n\n\n\n\n","import React, { useState } from 'react';\nimport { Fetch } from 'react-request';\nimport createStationFromRawData from '../models/station';\nimport Player from './Player';\nimport StationsList from './StationsList';\n\nconst Container = () => {\n  const [selectedStation, setSelectedStation] = useState(false);\n  const [stations, setStations] = useState([]);\n  const [isError, setError] = useState(false);\n\n  const stationError = () => {\n    setSelectedStation(false);\n  };\n\n  const STATIONS_URL = 'https://s3-us-west-1.amazonaws.com/cdn-web.tunein.com/stations.json';\n  const failureMessage = <div className=\"message\">Sorry, something is wrong with TuneIn lite. Please try again later.</div>;\n\n  return (\n    <Fetch\n      url={STATIONS_URL}\n      responseType=\"json\"\n      onResponse={(error, response) => {\n        const { data } = response;\n        // if data was successfully parsed (it will be null if not), grab the stations data\n        const { data: stationsRaw = undefined } = data ? data : { data: undefined};\n        // if parsed data is an array, pass each station object through factory function\n        const stations = Array.isArray(stationsRaw) ? stationsRaw.map(station => createStationFromRawData(station)): undefined;\n        if (stations) {\n          setStations(stations);\n        }\n        else {\n          setError(true);\n        }\n      }}\n    >\n      {({ fetching, failed, data }) => {\n          if (fetching) {\n            return <div className=\"message\">Loading stations! sit tight...</div>;\n          }\n\n          if (failed || isError) {\n            return failureMessage;\n          }\n\n          if (data) {\n            return (\n              <>\n                {selectedStation ? \n                  <Player \n                    station={stations.find((station) => station.id === selectedStation)}\n                    stationError={stationError}\n                  /> :\n                  <h4 className=\"message\">Welcome to TuneIn radio lite! Please select a station below:</h4>\n                }\n                <StationsList stations={stations} setSelectedStation={setSelectedStation} />\n              </>\n            );\n          }\n\n          return failureMessage;\n        }\n      }\n    </Fetch>\n  );\n};\n\nexport default Container;","import React from 'react';\nimport './App.css';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <Container/>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}